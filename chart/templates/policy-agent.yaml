{{ if eq .Values.policyAgent.enabled true }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: policy-agent
spec:
  hosts:
  - "policy-agent"
  http:
  - route:
    - destination:
        host: policy-agent
        subset: sympathetic
      weight: 50
    - destination:
        host: policy-agent
        subset: succinct
      weight: 50
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: policy-agent
spec:
  host: policy-agent
  subsets:
  - name: sympathetic
    labels:
      version: sympathetic
  - name: succinct
    labels:
      version: succinct
---
apiVersion: v1
kind: Service
metadata:
  name: policy-agent
  labels:
    app: policy-agent
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: policy-agent
---
kind: ServiceExport
apiVersion: net.gke.io/v1
metadata:
 name: policy-agent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-agent-sympathetic
  labels:
    app: policy-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: policy-agent
      version: sympathetic
  template:
    metadata:
      labels:
        app: policy-agent
        version: sympathetic
        sidecar.istio.io/inject: "true"
        istio.io/rev: "asm-managed-rapid"
    spec:
      containers:
      - name: policy-agent
        image: {{ .Values.policyAgent.image.repository }}:{{ .Values.policyAgent.image.tag }}
        args:
        - "run"
        - "--ignore=.*"  # exclude hidden dirs created by Kubernetes
        - "--server"
        - "--addr=:80"
        - "/etc/opa/policies"
        volumeMounts:
        - name: actions-rego
          mountPath: /etc/opa/policies/routing.rego
          subPath: routing.rego
      volumes:
      - name: actions-rego
        configMap:
          name: policy-agent-sympathetic-actions-rego-v4
          defaultMode: 0444
      restartPolicy: Always
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: policy-agent-sympathetic-actions-rego-v4
data:
  routing.rego: |
    package isidro.routing

    options := [
      {
        "action": {
          "confirmation message": "Sorry, but I didn't understand that.  Would you like to see documentation, to understand what I can help with?  Please respond by sending a threaded message reply, which includes an @isidro mention.",
          "async": false,
          "category": "link",
          "href": "https://github.com/ndebuhr/isidro",
          "completion message": "My documentation can be viewed here.",
          "tie break priority": 0,
        },
        "keywords": []
      },
      {
        "action": {
          "confirmation message": "Would my documentation be helpful to you?  Please respond by sending a threaded message reply, which includes an @isidro mention.",
          "async": false,
          "category": "link",
          "href": "https://github.com/ndebuhr/isidro",
          "completion message": "My documentation can be viewed here.",
          "tie break priority": 1,
        },
        "keywords": ["help"]
      },
      {
        "action": {
          "confirmation message": "Would you like me to run unit tests for you?",
          "async": true,
          "category": "github actions",
          "repository": "ndebuhr/isidro",
          "workflow": "unit-tests.yml",
          "ref": "refs/heads/master",
          "initialization message": "Unit tests are now running.  Results will be posted soon.",
          "completion message": "The unit tests run is complete.  Test results are attached.",
          "artifacts to read": ["results"],
          "tie break priority": 2,
        },
        "keywords": [
          "test", "testing", "unit", "quality", "verify", "check", "run"
        ]
      },
      {
        "action": {
          "confirmation message": "This sounds like a feature request or bug.  Would you like me to file your message as a GitHub issue?  This will improve awareness and understanding of your issue or request.",
          "async": false,
          "category": "repeater",
          "verb": "POST",
          "endpoint": "https://api.github.com/repos/ndebuhr/isidro/issues",
          "headers": {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": "Token {{ .Values.deployer.github.token }}",
          },
          "payload": {
            "title": "Feature request or bug (created automatically via chatbot)",
            "body": "${var.text}",
          },
          "completion message": "The issue has been filed https://github.com/ndebuhr/isidro/issues.",
          "tie break priority": 2,
        },
        "keywords": [
          "issue", "bug", "feature", "request", "broken", "outage", "problem", "incident"
        ]
      },
      {
        "action": {
          "confirmation message": "Self-destruction would make me a lot cheaper, easier to manage, and more secure.  However, I cannot self terminate.  You must provide a confirmation to trigger the shutdown.  Please respond with a \"yes\" (or similar).",
          "async": false,
          "category": "kubebash",
          "command": `kubectl scale deployment deployer-github deployer-github-workers gatekeeper keywords orchestration policy-agent-succinct policy-agent-sympathetic repeater responder tasks kubebash --replicas 0 -n isidro`,
          "initialization message": "![self-destruction](https://thumbs.gfycat.com/WatchfulEnviousGemsbok-max-1mb.gif)",
          "tie break priority": 3,
        },
        "keywords": ["destruct", "destruction"]
      }
    ]

    keywords := [options[i].keywords | options[i]]
    keyword_matches := [[keywords[j][k] | keywords[j][k] == input.keywords[l]] | keywords[j]]
    keyword_match_counts := [count(keyword_matches[m]) | keyword_matches[m]]
    action := [options[i].action | keyword_match_counts[i] == max(keyword_match_counts)]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-agent-succinct
  labels:
    app: policy-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: policy-agent
      version: succinct
  template:
    metadata:
      labels:
        app: policy-agent
        version: succinct
        sidecar.istio.io/inject: "true"
        istio.io/rev: "asm-managed-rapid"
    spec:
      containers:
      - name: policy-agent
        image: {{ .Values.policyAgent.image.repository }}:{{ .Values.policyAgent.image.tag }}
        args:
        - "run"
        - "--ignore=.*"  # exclude hidden dirs created by Kubernetes
        - "--server"
        - "--addr=:80"
        - "/etc/opa/policies"
        volumeMounts:
        - name: actions-rego
          mountPath: /etc/opa/policies/routing.rego
          subPath: routing.rego
      volumes:
      - name: actions-rego
        configMap:
          name: policy-agent-succinct-actions-rego-v4
          defaultMode: 0444
      restartPolicy: Always
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: policy-agent-succinct-actions-rego-v4
data:
  routing.rego: |
    package isidro.routing

    options := [
      {
        "action": {
          "confirmation message": "I didn't understand that.  Would you like to see my documentation?",
          "async": false,
          "category": "link",
          "href": "https://github.com/ndebuhr/isidro",
          "completion message": "Here's the documentation.",
          "tie break priority": 0,
        },
        "keywords": []
      },
      {
        "action": {
          "confirmation message": "Would you like to see my documentation?",
          "async": false,
          "category": "link",
          "href": "https://github.com/ndebuhr/isidro",
          "completion message": "Here's the documentation.",
          "tie break priority": 1,
        },
        "keywords": ["help"]
      },
      {
        "action": {
          "confirmation message": "Would you like me to run unit tests?",
          "async": true,
          "category": "github actions",
          "repository": "ndebuhr/isidro",
          "workflow": "unit-tests.yml",
          "ref": "refs/heads/master",
          "initialization message": "Running unit tests...",
          "completion message": "The unit tests run is complete.",
          "artifacts to read": ["results"],
          "tie break priority": 2,
        },
        "keywords": [
          "test", "testing", "unit", "quality", "verify", "check", "run"
        ]
      },
      {
        "action": {
          "confirmation message": "Is what you describe either a feature request or bug?  If so, I'll file it as such.",
          "async": false,
          "category": "repeater",
          "verb": "POST",
          "endpoint": "https://api.github.com/repos/ndebuhr/isidro/issues",
          "headers": {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": "Token {{ .Values.deployer.github.token }}",
          },
          "payload": {
            "title": "Feature request or bug (created automatically via chatbot)",
            "body": "${var.text}",
          },
          "completion message": "The issue has been filed https://github.com/ndebuhr/isidro/issues.",
          "tie break priority": 2,
        },
        "keywords": [
          "issue", "bug", "feature", "request", "broken", "outage", "problem", "incident"
        ]
      },
      {
        "action": {
          "confirmation message": "Would you like me to self-destruct?",
          "async": false,
          "category": "kubebash",
          "command": `kubectl scale deployment deployer-github deployer-github-workers gatekeeper keywords orchestration policy-agent-succinct policy-agent-sympathetic repeater responder tasks kubebash --replicas 0 -n isidro`,
          "initialization message": "![self-destruction](https://thumbs.gfycat.com/WatchfulEnviousGemsbok-max-1mb.gif)",
          "tie break priority": 3,
        },
        "keywords": ["destruct", "destruction"]
      }
    ]

    keywords := [options[i].keywords | options[i]]
    keyword_matches := [[keywords[j][k] | keywords[j][k] == input.keywords[l]] | keywords[j]]
    keyword_match_counts := [count(keyword_matches[m]) | keyword_matches[m]]
    action := [options[i].action | keyword_match_counts[i] == max(keyword_match_counts)]
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: policy-agent
spec:
  podSelector:
    matchLabels:
      app: policy-agent
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # GCP Health Check IPs
    - ipBlock:
        cidr: 35.191.0.0/16
    - ipBlock:
        cidr: 130.211.0.0/22
    # RFC1918 (overkill, but enables multi-cluster and multi-region)
    - ipBlock:
        cidr: 10.0.0.0/8
    - ipBlock:
        cidr: 172.16.0.0/12
    - ipBlock:
        cidr: 192.168.0.0/16
    # In-cluster services (failover for non-RFC1918 topologies)
    - podSelector:
        matchLabels:
          app: orchestration
  egress:
  - {}
{{ end }}